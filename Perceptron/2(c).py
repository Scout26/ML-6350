# -*- coding: utf-8 -*-
"""2(c)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1joZ5M6zd2fY6amBngFrCeM8JJGygG6s7
"""

import numpy as np
import pandas as pd

# Loading training and testing datasets into train and test variables.
train_data = pd.read_csv('train.csv', header=None)
test_data = pd.read_csv('test.csv', header=None)

# Separate features and target labels for training and testing datasets
X_train, y_train = train_data.iloc[:, :-1].values, train_data.iloc[:, -1].values
X_test, y_test = test_data.iloc[:, :-1].values, test_data.iloc[:, -1].values

# Convert labels: map 0 to -1, keep 1 as is, for compatibility with Perceptron training
y_train = np.where(y_train == 0, -1, 1)
y_test = np.where(y_test == 0, -1, 1)

# Function to train using the Average Perceptron method
def train_avg_perceptron(X, y, num_epochs=10):
    sample_count, feature_count = X.shape
    weights = np.zeros(feature_count)  # Initialize the weight vector
    bias = 0
    sum_weights = np.zeros(feature_count)  # Track cumulative weights for averaging
    sum_bias = 0

    # Iterate over multiple epochs
    for epoch in range(num_epochs):
        for i in range(sample_count):
            # Check if misclassified
            if y[i] * (np.dot(weights, X[i]) + bias) <= 0:
                # Update weights and bias for a misclassified example
                weights += y[i] * X[i]
                bias += y[i]
            # Accumulate weights and bias for averaging
            sum_weights += weights
            sum_bias += bias

    # Calculation of Average weights and bias over all updates
    avg_weights = sum_weights / (sample_count * num_epochs)
    avg_bias = sum_bias / (sample_count * num_epochs)
    return avg_weights, avg_bias

# Train our model on the given dataset
avg_weights, avg_bias = train_avg_perceptron(X_train, y_train, num_epochs=10)

# Function to make predictions based on weights and bias
def predict(X, weights, bias):
    return np.sign(np.dot(X, weights) + bias)

# Check the model on the test dataset
predicted_y = predict(X_test, avg_weights, avg_bias)
test_error_rate = np.mean(predicted_y != y_test)

# Display the final averaged weight vector and test error rate according to the question
print("Final averaged weight vector:", avg_weights)
print("Test Error Rate:", test_error_rate)

